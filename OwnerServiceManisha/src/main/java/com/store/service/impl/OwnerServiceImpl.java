package com.store.service.impl;

import java.util.Date;
import java.util.List;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.store.entity.Owner;
import com.store.repository.OwnerRepository;
import com.store.service.OwnerService;
import com.DownloadFeignClient;
import com.NotificationServiceFeignClient;
import com.ReviewFeignClient;
import com.UserFeignClient;
import com.store.customexception.InvalidOwnerInputException;
import com.store.customexception.OwnerAlreadyExistsException;
import com.store.customexception.OwnerNotFoundException;
import com.store.dto.NotificationDTO;
import com.store.dto.OwnerDTO;
import com.store.dto.ReviewDTO;

@Service
public class OwnerServiceImpl implements OwnerService {

    @Autowired
    private OwnerRepository ownerRepository;
    
    @Autowired
	private ModelMapper mapper;
    
    @Autowired
    UserFeignClient UserFeignClient;
    
    @Autowired
    DownloadFeignClient DownloadFeignClient;
    
    @Autowired
    ReviewFeignClient ReviewFeignClient;
    
    @Autowired
    NotificationServiceFeignClient notificationServiceFeignClient;

    @Override
    public List<Owner> getAllOwners() {
        return ownerRepository.findAll();
    }

    @Override
    public Owner getOwnerById(Long id) {
        return ownerRepository.findById(id)
                .orElseThrow(() -> new OwnerNotFoundException("Owner with ID " + id + " not found"));
    }

    @Override
    public Owner createOwner(Owner owner) {
        // Validate owner input
        if (owner.getOwnername() == null || owner.getOwnername().isEmpty()) {
            throw new InvalidOwnerInputException("Owner name must not be null or empty");
        }

        // Check if the owner already exists by email
        if (ownerRepository.existsByOwneremail(owner.getOwneremail())) {
            throw new OwnerAlreadyExistsException("Owner with email " + owner.getOwneremail() + " already exists");
        }

        // Save the owner (ID should be auto-generated by the database)
        return ownerRepository.save(owner);
    }

    @Override
    public Owner updateOwner(Long ownerid, Owner ownerDetails) {
        // Retrieve existing owner
        Owner owner = getOwnerById(ownerid);

        // Validate owner details input
        if (ownerDetails.getOwnername() == null || ownerDetails.getOwnername().isEmpty()) {
            throw new InvalidOwnerInputException("Owner name must not be null or empty");
        }

        // Update owner details
        owner.setOwnername(ownerDetails.getOwnername());
        owner.setOwnerpassword(ownerDetails.getOwnerpassword());
        owner.setOwneremail(ownerDetails.getOwneremail());

        // Save updated owner
        return ownerRepository.save(owner);
    }

    @Override
    public void deleteOwner(Long ownerid) {
        // Check if the owner exists before deleting
        getOwnerById(ownerid); // This will throw OwnerNotFoundException if not found
        ownerRepository.deleteById(ownerid);
    }

	@Override
	public OwnerDTO getOwnerDataWithUserData(Long ownerid) {
		
		Owner owner = ownerRepository.findById(ownerid).get();

		OwnerDTO ownerDTO = mapper.map(owner, OwnerDTO.class);

		OwnerDTO getUserData = UserFeignClient.GetUserData(ownerid);
				
		ownerDTO.setUsername(getUserData.getUsername());
		ownerDTO.setEmail(getUserData.getEmail());
		
		return ownerDTO;
	}

	@Override
	public Long getDownloadCount(Long appId) {
        return DownloadFeignClient.getDownloadCount(appId);
    }

	@Override
	public List<ReviewDTO> getReviews(Long appId) {
		return ReviewFeignClient.getReviews(appId);
	}

	@Override
	public void notifyOwner(Long ownerid, Long appId, String message) {

		 NotificationDTO notificationDTO = new NotificationDTO();
	        notificationDTO.setOwnerid(ownerid);
	        notificationDTO.setAppId(appId);
	        notificationDTO.setMessage(message);
	        notificationDTO.setNotificationDate(new Date());

	        notificationServiceFeignClient.sendNotification(notificationDTO);
	    }
}



